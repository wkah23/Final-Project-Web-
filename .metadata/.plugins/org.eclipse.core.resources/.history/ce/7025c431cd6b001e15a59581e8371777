package com.study.springboot.auth;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.factory.PasswordEncoderFactories;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.AuthenticationFailureHandler;

import jakarta.servlet.DispatcherType;  

@Configuration	
public class WebSecurityConfig  {  

	@Autowired
	public AuthenticationFailureHandler authenticationFailureHandler;
	@Bean  // 변경된 코드
	protected SecurityFilterChain filterChain(HttpSecurity http) throws Exception 
	{  
        http.csrf().disable()
    		.cors().disable()
        	.authorizeHttpRequests(request -> request  
        		.dispatcherTypeMatchers(DispatcherType.FORWARD).permitAll()
        		.requestMatchers("/").permitAll()
                .requestMatchers("/css/**", "/js/**", "/img/**").permitAll()
                .requestMatchers("/guest/**").permitAll() 
                .requestMatchers("/member/**").hasAnyRole("USER", "ADMIN")
                .requestMatchers("/admin/**").hasRole("ADMIN") 
                .anyRequest().authenticated() // 어떠한 요청이라도 인증필요
            );
        http.formLogin() 
        	.loginPage("/loginForm") // default : /login
        	.loginProcessingUrl("/j_spring_security_check")
//        	.failureUrl("/loginForm?error") // default : /login?error
        	.failureHandler(authenticationFailureHandler)
        	.usernameParameter("j_username") 	// default : j_username
        	.passwordParameter("j_password") 	// defa
        	.permitAll();
        
        	// 로그아웃 
        http.logout()
    		.logoutUrl("/logout") // default
    		.logoutSuccessUrl("/")
    		.permitAll();
        
		return http.build(); 
    }
 
	@Bean
    // users() 메서드는 빠른 테스트를 위해 등록이 간단한 inMemory 방식의 인증 사용자를 등록
    protected UserDetailsService users() 
    {
        UserDetails user = User.builder()
        		.username("user")
        		.password(passwordEncoder().encode("1234"))
        		.roles("USER")	// ROLE_USER 에서 ROLE_ 자동으로 붙는다.
        		.build();
        UserDetails admin = User.builder()
        		.username("admin")
        		.password(passwordEncoder().encode("1234"))
        		.roles("USER", "ADMIN")	
        		.build();
        
        // 메모리에 사용자 정보를 담는다.
        return new InMemoryUserDetailsManager(user, admin);
    }
    
    /*
      	시큐리티 5 에서는 패스워드를 반드시 암호화해서 저장해야 한다.
      	encode() 를 호출할 때마다 패스워드가 변경된다.
    */
    // passwordEncoder()   
    // 버전업 되면서 아래와 같이 수정됨.
    // 내부적으로 접두어를 붙일 수 있도록 직접 패스워드인코더를 지정하지 않는다.
    public PasswordEncoder passwordEncoder() {
      return PasswordEncoderFactories.createDelegatingPasswordEncoder();
    }
}
